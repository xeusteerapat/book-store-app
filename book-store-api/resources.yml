# Create DynamoDB 2 tables, Books and orders
booksTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "bookId"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "bookId"
        KeyType: "HASH"
    Tags:
      - Key: Name
        Value: books-table

orderTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "userId" # we'll use userId to lookup particular order
        AttributeType: "S"
      - AttributeName: "orderId"
        AttributeType: "S"
      - AttributeName: "bookId"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "userId"
        KeyType: "HASH"
      - AttributeName: "orderId"
        KeyType: "RANGE"
    GlobalSecondaryIndexes:
      - IndexName: "byOrder"
        KeySchema:
          - AttributeName: "bookId"
            KeyType: "HASH"
          - AttributeName: "createdAt"
            KeyType: "RANGE"
        Projection:
          ProjectionType: ALL
    Tags:
      - Key: Name
        Value: order-table

# Create User pool with Cognito
cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UsernameAttributes:
      - email
    UserPoolName: "BookStoreUserPool"

cognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: Web
    UserPoolId: !Ref cognitoUserPool

cognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Admin users belongs to this group"
    GroupName: "Admin"
    Precedence: 0 # highest priority
    RoleArn: !GetAtt cognitoAdminIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

# Cognito Admin IAM Role
cognitoAdminIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Description: "IAM role for admin group user"
    Policies:
      - PolicyName: "bookstore-admin-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt booksTable.Arn
                - !GetAtt orderTable.Arn
    RoleName: "bookstore-admin-role"

# customers groups
cognitoCustomerGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Customers users belongs to this group"
    GroupName: "Customer"
    Precedence: 1
    RoleArn: !GetAtt cognitoUserIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

# Cognito Admin IAM Role
cognitoUserIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Description: "IAM role for customer group user"
    Policies:
      - PolicyName: "bookstore-customer-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt orderTable.Arn
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:Query"
                - "dynamodb:BatchGetItem"
              Resource:
                - !GetAtt booksTable.Arn
    RoleName: "bookstore-customer-role"
